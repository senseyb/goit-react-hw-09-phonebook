{"version":3,"sources":["redux/contacts/contacts.actions.js","components/UserMenu/UserMenu.Module.css","redux/auth/auth.operations.js","redux/auth/auth.actions.js","redux/auth/auth.reducer.js","redux/contacts/contacts.reducer.js","redux/store.js","redux/auth/auth.selectors.js","components/UserMenu/Navigation.js","components/UserMenu/UserMenu.js","components/UserMenu/AuthNav.js","components/UserMenu/AppBar.js","components/UserMenu/PrivateRoute.js","components/UserMenu/PublicRoute.js","App.js","index.js"],"names":["addNewContactsRequest","createAction","addNewContactsSuccess","addNewContactsError","getAllContactsRequest","getAllContactsSuccess","getAllContactsError","filterChange","removeContactsRequest","removeContactsSuccess","removeContactsError","module","exports","axios","defaults","baseURL","token","headers","common","Authorization","register","credentials","dispatch","a","registerRequest","post","response","data","registerSuccess","registerError","login","loginRequest","loginSuccess","loginError","logOut","logoutRequest","logoutSuccess","window","location","reload","logoutError","getCurrentUser","getState","persistedToken","auth","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError","initialUserState","name","email","user","createReducer","_","payload","error","authReducer","combineReducers","loading","items","action","state","filter","item","id","todosReducer","authPersistConfig","key","storage","whitelist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","contacts","contactsReducer","devTools","process","persistor","persistStore","getIsAuthenticated","getUsername","Navigation","isAuthenticated","useSelector","to","exact","className","styles","navigation","navigation2","UserMenu","useDispatch","userMenu","type","onClick","userMenuBtn","AuthNav","AppBar","header","PrivateRoute","Component","component","redirectTo","routeProps","render","props","PublicRoute","restricted","HomeView","lazy","RegisterView","LoginView","Contacts","App","useEffect","fallback","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1259f5eb.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nconst addNewContactsRequest = createAction(\"contacts/addNewContactsRequest\");\nconst addNewContactsSuccess = createAction(\"contacts/addNewContactsSuccess\");\nconst addNewContactsError = createAction(\"contacts/addNewContactsError\");\n\nconst getAllContactsRequest = createAction(\"contacts/getAllContactsRequest\");\nconst getAllContactsSuccess = createAction(\"contacts/getAllContactsSuccess\");\nconst getAllContactsError = createAction(\"contacts/getAllContactsError\");\n\nconst filterChange = createAction(\"contacts/filterChange\");\n\nconst removeContactsRequest = createAction(\"contacts/removeContactsRequest\");\nconst removeContactsSuccess = createAction(\"contacts/removeContactsSuccess\");\nconst removeContactsError = createAction(\"contacts/removeContactsError\");\n\nexport {\n  addNewContactsRequest,\n  addNewContactsSuccess,\n  addNewContactsError,\n  getAllContactsRequest,\n  getAllContactsSuccess,\n  getAllContactsError,\n  filterChange,\n  removeContactsRequest,\n  removeContactsSuccess,\n  removeContactsError,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"_2htrq-ZrhNtPvUs2m3sUmu\",\"navigation\":\"_1UKKB5k05sbq1PMzCDPtZ6\",\"navigation2\":\"_1foCIY2Y-Yh-rtwy_KKPyP\",\"userMenu\":\"_393z-DImFwM_IVlfDE5SVS\",\"userMenuBtn\":\"_2kj_OMrW2TEo--Zg1TuU-R\"};","import axios from \"axios\";\nimport {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n} from \"./auth.actions\";\n\naxios.defaults.baseURL = \"https://connections-api.herokuapp.com\";\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = \"\";\n  },\n};\n\nconst register = (credentials) => async (dispatch) => {\n  dispatch(registerRequest());\n\n  try {\n    const response = await axios.post(\"/users/signup\", credentials);\n    token.set(response.data.token);\n    dispatch(registerSuccess(response.data));\n  } catch (error) {\n    dispatch(registerError(error));\n  }\n};\n\nconst login = (credentials) => async (dispatch) => {\n  dispatch(loginRequest());\n\n  try {\n    const response = await axios.post(\"/users/login\", credentials);\n    token.set(response.data.token);\n    dispatch(loginSuccess(response.data));\n  } catch (error) {\n    dispatch(loginError(error));\n  }\n};\n\nconst logOut = () => async (dispatch) => {\n  dispatch(logoutRequest());\n\n  try {\n    await axios.post(\"/users/logout\");\n    token.unset();\n    dispatch(logoutSuccess());\n    window.location.reload();\n  } catch (error) {\n    dispatch(logoutError(error));\n  }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n  token.set(persistedToken);\n  dispatch(getCurrentUserRequest());\n  try {\n    const response = await axios.get(\"users/current\");\n    dispatch(getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(getCurrentUserError(error));\n  }\n};\n\nexport { register, login, logOut, getCurrentUser };\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst registerRequest = createAction(\"auth/registerRequest\");\nconst registerSuccess = createAction(\"auth/registerSuccess\");\nconst registerError = createAction(\"auth/registerError\");\n\nconst loginRequest = createAction(\"auth/loginRequest\");\nconst loginSuccess = createAction(\"auth/loginSuccess\");\nconst loginError = createAction(\"auth/loginError\");\n\nconst logoutRequest = createAction(\"auth/logoutRequest\");\nconst logoutSuccess = createAction(\"auth/logoutSuccess\");\nconst logoutError = createAction(\"auth/logoutError\");\n\nconst getCurrentUserRequest = createAction(\"auth/getCurrentUserRequest\");\nconst getCurrentUserSuccess = createAction(\"auth/getCurrentUserSuccess\");\nconst getCurrentUserError = createAction(\"auth/getCurrentUserError\");\n\nexport {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n};\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  registerSuccess,\n  registerError,\n  loginSuccess,\n  loginError,\n  logoutSuccess,\n  logoutError,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n} from \"./auth.actions\";\n\nconst initialUserState = { name: null, email: null };\n\nconst user = createReducer(initialUserState, {\n  [registerSuccess]: (_, { payload }) => payload.user,\n  [loginSuccess]: (_, { payload }) => payload.user,\n  [logoutSuccess]: () => initialUserState,\n  [getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n  [registerSuccess]: (_, { payload }) => payload.token,\n  [loginSuccess]: (_, { payload }) => payload.token,\n  [logoutSuccess]: () => null,\n});\n\nconst error = createReducer(null, {\n  [registerError]: (_, { payload }) => payload,\n  [loginError]: (_, { payload }) => payload,\n  [logoutError]: (_, { payload }) => payload,\n  [getCurrentUserError]: (_, { payload }) => payload,\n});\n\nconst authReducer = combineReducers({\n  user,\n  token,\n  error,\n});\n\nexport { authReducer };\n","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addNewContactsRequest,\n  addNewContactsSuccess,\n  addNewContactsError,\n  getAllContactsRequest,\n  getAllContactsSuccess,\n  getAllContactsError,\n  filterChange,\n  removeContactsRequest,\n  removeContactsSuccess,\n  removeContactsError,\n} from \"./contacts.actions\";\n\nconst loading = createReducer(false, {\n  [getAllContactsRequest]: () => true,\n  [getAllContactsSuccess]: () => false,\n  [getAllContactsError]: () => false,\n  [addNewContactsRequest]: () => true,\n  [addNewContactsSuccess]: () => false,\n  [addNewContactsError]: () => false,\n  [removeContactsRequest]: () => true,\n  [removeContactsSuccess]: () => false,\n  [removeContactsError]: () => false,\n});\n\nconst items = createReducer([], {\n  [getAllContactsSuccess]: (_, action) => action.payload,\n  [addNewContactsSuccess]: (state, action) => [action.payload, ...state],\n  [removeContactsSuccess]: (state, action) =>\n    state.filter((item) => item.id !== action.payload),\n });\n\nconst filter = createReducer(\"\", {\n  [filterChange]: (_, action) => action.payload,\n});\n\nconst todosReducer = combineReducers({\n  items,\n  filter,\n  loading,\n});\n\nexport default todosReducer;","import { getDefaultMiddleware, configureStore } from \"@reduxjs/toolkit\";\nimport { authReducer } from \"./auth/auth.reducer\";\nimport contactsReducer from \"./contacts/contacts.reducer\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst authPersistConfig = {\n  key: \"auth\",\n  storage,\n  whitelist: [\"token\"]\n}\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store)\n\n\n\nexport {store, persistor};\n\n\n\n\n","const getIsAuthenticated = (state) => state.auth.token;\n\nconst getUsername = state => state.auth.user.name;\n\nexport { getIsAuthenticated, getUsername };\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styles from \"./UserMenu.Module.css\";\nimport { useSelector } from \"react-redux\";\nimport { getIsAuthenticated } from \"../../redux/auth/auth.selectors\";\n\nconst Navigation = () => {\n  const isAuthenticated = useSelector(getIsAuthenticated);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <NavLink to=\"/\" exact className={styles.navigation}>\n            Главная страница\n          </NavLink>\n          <NavLink to=\"/contacts\" exact className={styles.navigation2}>\n            Страница контактов\n          </NavLink>\n        </>\n      ) : (\n        <>\n          <NavLink to=\"/\" exact className={styles.navigation}>\n            Главная страница\n          </NavLink>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getUsername } from \"../../redux/auth/auth.selectors\";\nimport { logOut } from \"../../redux/auth/auth.operations\";\nimport styles from \"./UserMenu.Module.css\";\n\nconst UserMenu = () => {\n  const name = useSelector(getUsername);\n  const dispatch = useDispatch();\n  const onLogout = () => dispatch(logOut());\n\n  return (\n    <div>\n      <span className={styles.userMenu}>Welcome, {name}</span>\n      <button type=\"button\" onClick={onLogout} className={styles.userMenuBtn}>\n        Logout\n      </button>\n    </div>\n  );\n};\n\nexport default UserMenu;\n","import React from 'react'\nimport { NavLink } from \"react-router-dom\"\nimport styles from \"./UserMenu.Module.css\";\n\nconst AuthNav = () => (\n  <div>\n    <NavLink to=\"/register\" exact className={styles.navigation}>\n      Регистрация\n    </NavLink>\n    <NavLink to=\"/login\" exact className={styles.navigation2}>\n      Логин\n    </NavLink>\n  </div>\n);\n\nexport default AuthNav;","import React from \"react\";\nimport Navigation from \"./Navigation\";\nimport UserMenu from \"./UserMenu\";\nimport AuthNav from \"./AuthNav\";\nimport { useSelector } from \"react-redux\";\nimport { getIsAuthenticated } from \"../../redux/auth/auth.selectors\";\nimport styles from \"./UserMenu.Module.css\";\n\nconst AppBar = () => {\n  const isAuthenticated = useSelector(getIsAuthenticated);\n\n  return (\n    <header className={styles.header}>\n      <Navigation />\n      {isAuthenticated ? <UserMenu /> : <AuthNav />}\n    </header>\n  );\n};\n\nexport default AppBar;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getIsAuthenticated } from \"../../redux/auth/auth.selectors\";\n\nconst PrivateRoute = ({\n  component: Component,\n  redirectTo,\n  ...routeProps\n}) => {\n      const isAuthenticated = useSelector(getIsAuthenticated);\n  return (\n    <Route\n      {...routeProps}\n      render={(props) => {\n        return isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={redirectTo} />\n        );\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getIsAuthenticated } from \"../../redux/auth/auth.selectors\";\n\nconst PublicRoute = ({\n  component: Component,\n  redirectTo,\n  restricted = false,\n  ...routeProps\n}) => {\n  const isAuthenticated = useSelector(getIsAuthenticated);\n  return (\n    <Route\n      {...routeProps}\n      render={(props) => {\n        return isAuthenticated && restricted ? (\n          <Redirect to={redirectTo} />\n        ) : (\n          <Component {...props} />\n        );\n      }}\n    />\n  );\n};\n\nexport default PublicRoute;\n","import { Suspense, lazy, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Switch } from \"react-router-dom\";\nimport AppBar from \"./components/UserMenu/AppBar\";\nimport { getCurrentUser } from \"./redux/auth/auth.operations\";\nimport PrivateRoute from \"./components/UserMenu/PrivateRoute\";\nimport PublicRoute from \"./components/UserMenu/PublicRoute\";\n\nconst HomeView = lazy(() =>\n  import(\"./views/HomeView\" /* webpackChunkName: \"home-view\" */)\n);\n\nconst RegisterView = lazy(() =>\n  import(\"./views/RegisterView\" /* webpackChunkName: \"register-view\" */)\n);\nconst LoginView = lazy(() =>\n  import(\"./views/LoginView\" /* webpackChunkName: \"login-view\" */)\n);\nconst Contacts = lazy(() =>\n  import(\"./components/Contacts\" /* webpackChunkName: \"contacts-view\" */)\n);\n\nconst App = () => {\n   const dispatch = useDispatch();\n   useEffect(() => {\n     dispatch(getCurrentUser());\n   }, [dispatch]);\n  return (\n    <div className=\"block\">\n      <AppBar />\n      <Suspense fallback={<p>Loading in progress...</p>}>\n        <Switch>\n          <PublicRoute exact path=\"/\" component={HomeView} />\n          <PublicRoute\n            exact\n            restricted\n            path=\"/register\"\n            redirectTo=\"/contacts\"\n            component={RegisterView}\n          />\n          <PublicRoute\n            exact\n            restricted\n            path=\"/login\"\n            redirectTo=\"/contacts\"\n            component={LoginView}\n          />\n          <PrivateRoute\n            exact\n            path=\"/contacts\"\n            component={Contacts}\n            redirectTo=\"/login\"\n          />\n        </Switch>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n\n// class App extends Component {\n//   componentDidMount() {\n//     this.props.onGetCurrentUser();\n//   }\n//   render() {\n//     return (\n//       <div className=\"block\">\n//         <AppBar />\n//         <Suspense fallback={<p>Loading in progress...</p>}>\n//           <Switch>\n//             <PublicRoute exact path=\"/\" component={HomeView} />\n//             <PublicRoute\n//               exact\n//               restricted\n//               path=\"/register\"\n//               redirectTo=\"/contacts\"\n//               component={RegisterView}\n//             />\n//             <PublicRoute\n//               exact\n//               restricted\n//               path=\"/login\"\n//               redirectTo=\"/contacts\"\n//               component={LoginView}\n//             />\n//             <PrivateRoute\n//               exact\n//               path=\"/contacts\"\n//               component={Contacts}\n//               redirectTo=\"/login\"\n//             />\n//           </Switch>\n//         </Suspense>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = {\n//   onGetCurrentUser: getCurrentUser,\n// };\n\n// export default connect(null, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\n\nimport {store, persistor} from \"./redux/store\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}